import numpy as np

def page_rank(G, damping=0.85, max_iterations=100, tolerance=1.0e-6):
    n = G.shape[0]
    pr = np.ones(n) / n  # Initialize PageRank values
    teleport = (1 - damping) / n
    G_sum = np.sum(G, axis=0)  # Sum of columns (out-degree)

    for i in range(max_iterations):
        # Avoid division by zero by replacing 0 with a small value
        G_sum[G_sum == 0] = 1e-10
        pr_new = teleport + damping * (G @ (pr / G_sum))  # Calculate new PageRank
        if np.linalg.norm(pr_new - pr, 1) < tolerance:  # Check for convergence
            break
        pr = pr_new

    return pr

def hits_algorithm(G, max_iterations=100, tolerance=1.0e-6):
    n = G.shape[0]
    
    # Initialize hub and authority scores
    h = np.ones(n)
    a = np.ones(n)
    
    for _ in range(max_iterations):
        a_new = G.T @ h  # Update authority scores
        h_new = G @ a_new  # Update hub scores
        
        # Normalize scores to prevent overflow
        a_new /= np.linalg.norm(a_new, 2) if np.linalg.norm(a_new, 2) > 0 else 1
        h_new /= np.linalg.norm(h_new, 2) if np.linalg.norm(h_new, 2) > 0 else 1
        
        if np.linalg.norm(a_new - a, 1) < tolerance and np.linalg.norm(h_new - h, 1) < tolerance:
            break
        
        a = a_new
        h = h_new
    
    return h, a

if __name__ == "__main__":
    # Step 1: Take user input for the number of nodes and edges
    n = int(input("Enter the number of nodes: "))
    
    G = np.zeros((n, n))  # Initialize adjacency matrix
    
    print("Enter edges in the format 'from_node to_node'. Type 'done' when finished.")
    while True:
        edge = input()
        if edge.lower() == 'done':
            break
        from_node, to_node = map(int, edge.split())
        G[from_node][to_node] = 1  # Add edge to the adjacency matrix
    
    # Step 2: PageRank Calculation
    pr_scores = page_rank(G)
    
    # Step 3: HITS Algorithm (Hub and Authority)
    hub_scores, authority_scores = hits_algorithm(G)
    
    # Step 4: Print Results
    print("\nPageRank Results:")
    for i, pr in enumerate(pr_scores):
        print(f"Node {i} has PageRank: {pr:.4f}")
    
    print("\nAuthority Scores:")
    for i, authority in enumerate(authority_scores):
        print(f"Node {i} has Authority Score: {authority:.4f}")
    
    print("\nHub Scores:")
    for i, hub in enumerate(hub_scores):
        print(f"Node {i} has Hub Score: {hub:.4f}")
