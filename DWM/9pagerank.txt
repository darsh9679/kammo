import numpy as np

def page_rank(G, s=0.85, max_iterations=100, tolerance=1.0e-6):
    """
    G: Adjacency matrix where G[i][j] is the link from 'i' to 'j'
    s: Damping factor (default 0.85)
    max_iterations: Maximum number of iterations (default 100)
    tolerance: Tolerance to check for convergence (default 1.0e-6)
    """
    n = G.shape[0]
    M = np.zeros((n, n))
    
    # Build the matrix M where M[j][i] is 1/num_links_out(i) if there is a link from i to j
    for i in range(n):
        if G[i].sum() == 0:
            G[i] = np.ones(n)  # Handle dangling nodes (pages with no outgoing links)
        M[:, i] = G[i] / G[i].sum()
    
    # Initialize the rank vector to 1/n
    rank = np.ones(n) / n
    
    for _ in range(max_iterations):
        new_rank = (1 - s) / n + s * M @ rank
        # Check for convergence
        if np.linalg.norm(new_rank - rank, 1) < tolerance:
            rank = new_rank
            break
        rank = new_rank

    return rank

# Example usage
if __name__ == "__main__":
    # Example adjacency matrix for 4 pages
    G = np.array([[0, 0, 1, 0],
                  [1, 0, 0, 0],
                  [0, 1, 0, 1],
                  [1, 1, 0, 0]])

    ranks = page_rank(G)
    print("Page Ranks:", ranks)
