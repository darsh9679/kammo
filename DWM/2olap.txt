-- Create the tables if they don't exist
CREATE TABLE IF NOT EXISTS stores (
    store_id INT PRIMARY KEY,
    store_name VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(255),
    category_id INT
);

CREATE TABLE IF NOT EXISTS product_categories (
    category_id INT PRIMARY KEY,
    category_name VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS time_dimension (
    time_id INT PRIMARY KEY,
    date DATE,
    year INT,
    month VARCHAR(20),
    quarter VARCHAR(2)
);

CREATE TABLE IF NOT EXISTS sales (
    sale_id INT PRIMARY KEY,
    store_id INT,
    product_id INT,
    time_id INT,
    amount DECIMAL(10, 2),
    FOREIGN KEY (store_id) REFERENCES stores(store_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id),
    FOREIGN KEY (time_id) REFERENCES time_dimension(time_id)
);

-- Print the structure of all tables
DESCRIBE stores;
DESCRIBE products;
DESCRIBE product_categories;
DESCRIBE time_dimension;
DESCRIBE sales;

-- Insert hypothetical data for demonstration purposes
INSERT INTO stores (store_id, store_name) VALUES 
(1, 'Store A'), 
(2, 'Store B');

INSERT INTO products (product_id, product_name, category_id) VALUES 
(1, 'Laptop', 1), 
(2, 'Smartwatch', 1), 
(3, 'Tablet', 2);

INSERT INTO product_categories (category_id, category_name) VALUES 
(1, 'Electronics'), 
(2, 'Computers');

INSERT INTO time_dimension (time_id, date, year, month, quarter) VALUES 
(1, '2023-01-01', 2023, 'January', '01'),
(2, '2023-06-01', 2023, 'June', '02'),
(3, '2023-07-01', 2023, 'July', '03'),
(4, '2023-08-01', 2023, 'August', '03');

INSERT INTO sales (sale_id, store_id, product_id, time_id, amount) VALUES 
(1, 1, 1, 1, 1000.00), 
(2, 1, 2, 2, 300.00), 
(3, 2, 3, 3, 450.00),
(4, 1, 1, 4, 1200.00),
(5, 2, 2, 2, 600.00);

-- Query 1: Total sales by store and time
SELECT st.store_name, t.year, t.month, SUM(s.amount) AS total_sales 
FROM sales s 
JOIN stores st ON s.store_id = st.store_id
JOIN time_dimension t ON s.time_id = t.time_id 
GROUP BY st.store_name, t.year, t.month 
ORDER BY st.store_name, t.year, t.month;

-- Expected Output for Query 1
-- +----------+------+--------+-------------+
-- | store_name | year | month  | total_sales |
-- +----------+------+--------+-------------+
-- | Store A  | 2023 | January |     1000.00 |
-- | Store A  | 2023 | June    |      300.00 |
-- | Store A  | 2023 | August  |    1200.00  |
-- | Store B  | 2023 | June    |      600.00 |
-- +----------+------+--------+-------------+

-- Query 2: Total sales by product category and store
SELECT pc.category_name, st.store_name, SUM(s.amount) AS total_sales 
FROM sales s 
JOIN products p ON s.product_id = p.product_id 
JOIN product_categories pc ON p.category_id = pc.category_id
JOIN stores st ON s.store_id = st.store_id
GROUP BY pc.category_name, st.store_name 
ORDER BY pc.category_name, st.store_name;

-- Expected Output for Query 2
-- +---------------+----------+-------------+
-- | category_name | store_name | total_sales |
-- +---------------+----------+-------------+
-- | Computers     | Store A  |     1000.00 |
-- | Electronics   | Store A  |      300.00 |
-- | Electronics   | Store B  |      600.00 |
-- +---------------+----------+-------------+

-- Query 3: Total sales for specific products by date
SELECT p.product_name, t.date, SUM(s.amount) AS total_sales 
FROM sales s
JOIN products p ON s.product_id = p.product_id 
JOIN time_dimension t ON s.time_id = t.time_id
WHERE p.product_name IN ('Laptop', 'Smartwatch', 'Tablet') 
AND t.date BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY p.product_name, t.date 
ORDER BY p.product_name, t.date;

-- Expected Output for Query 3
-- +--------------+------------+-------------+
-- | product_name | date       | total_sales |
-- +--------------+------------+-------------+
-- | Laptop       | 2023-01-01 |     1000.00 |
-- | Laptop       | 2023-08-01 |     1200.00 |
-- | Smartwatch   | 2023-06-01 |      300.00 |
-- | Tablet       | 2023-07-01 |      450.00 |
-- +--------------+------------+-------------+

-- Query 4: Daily sales for specific months in 2023
SELECT t.month, t.date, SUM(s.amount) AS daily_sales 
FROM sales s 
JOIN time_dimension t ON s.time_id = t.time_id
WHERE t.year = 2023 
AND t.month IN ('June', 'July', 'August') 
GROUP BY t.month, t.date 
ORDER BY t.month, t.date;

-- Expected Output for Query 4
-- +--------+------------+-------------+
-- | month  | date       | daily_sales |
-- +--------+------------+-------------+
-- | June   | 2023-06-01 |      900.00 |
-- | July   | 2023-07-01 |      450.00 |
-- | August | 2023-08-01 |    1200.00 |
-- +--------+------------+-------------+

-- Query 5: Quarterly sales by store
SELECT st.store_name,
    SUM(CASE WHEN t.quarter = '01' THEN s.amount ELSE 0 END) AS Q1Sales,
    SUM(CASE WHEN t.quarter = '02' THEN s.amount ELSE 0 END) AS Q2Sales,
    SUM(CASE WHEN t.quarter = '03' THEN s.amount ELSE 0 END) AS Q3Sales,
    SUM(CASE WHEN t.quarter = '04' THEN s.amount ELSE 0 END) AS Q4Sales
FROM sales s 
JOIN stores st ON s.store_id = st.store_id
JOIN time_dimension t ON s.time_id = t.time_id 
WHERE t.year = 2023
GROUP BY st.store_name 
ORDER BY st.store_name;

-- Expected Output for Query 5
-- +----------+---------+---------+---------+---------+
-- | store_name | Q1Sales | Q2Sales | Q3Sales | Q4Sales |
-- +----------+---------+---------+---------+---------+
-- | Store A  |   1000.00  |   300.00 |   1200.00 |      0.00  |
-- | Store B  |      0.00  |   600.00 |      0.00  |      0.00  |
-- +----------+---------+---------+---------+---------+